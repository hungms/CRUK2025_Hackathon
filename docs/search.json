[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CRUK 2025 Hackathon",
    "section": "",
    "text": "0.1 Introduction",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>**Introduction**</span>"
    ]
  },
  {
    "objectID": "metastatic_signature2.html",
    "href": "metastatic_signature2.html",
    "title": "2  Generating Prognostic Signature",
    "section": "",
    "text": "2.1 Actions\nhttps://molecular-cancer.biomedcentral.com/articles/10.1186/s12943-024-02182-w\nWe will try to find metastatic-related genes for LUAD/LUSC by doing the following:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generating Prognostic Signature</span>"
    ]
  },
  {
    "objectID": "metastatic_signature2.html#actions",
    "href": "metastatic_signature2.html#actions",
    "title": "2  Generating Prognostic Signature",
    "section": "",
    "text": "Short-list prognostic genes by univariate analysis (p &lt; 0.05)\nCross-validate with Lasso-Cox model\nFurther short-list genes by multivariate analysis (p &lt; 0.05)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generating Prognostic Signature</span>"
    ]
  },
  {
    "objectID": "metastatic_signature2.html#load-format-data",
    "href": "metastatic_signature2.html#load-format-data",
    "title": "2  Generating Prognostic Signature",
    "section": "2.2 Load & format data",
    "text": "2.2 Load & format data\n\n\nCode\n# processed on NEMO so far\nset.seed(42)\nlibrary(tidyverse)\nlibrary(SummarizedExperiment)\nlibrary(readxl)\nlibrary(glmnet)\nlibrary(survival)\nsetwd(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/0_raw\")\n\n\n\n\nCode\n# read gene expression\ngex &lt;- read.csv(\"../1_processed/TCGA_lung_gex.csv\", row.names = 1)\ncolnames(gex) &lt;- gsub(\"\\\\.\", \"-\", colnames(gex))\ngex &lt;- log1p(gex)\ngex[1:5, 1:5]\n\n\n\nA data.frame: 5 × 5\n\n\n\nTCGA-05-4244\nTCGA-05-4249\nTCGA-05-4250\nTCGA-05-4382\nTCGA-05-4384\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nA1BG\n3.296955\n4.7969056\n3.948542\n4.989779\n4.854893\n\n\nA1CF\n0.000000\n0.2791457\n0.000000\n0.000000\n0.000000\n\n\nA2BP1\n1.009927\n0.9592736\n0.000000\n0.000000\n0.000000\n\n\nA2LD1\n4.916339\n4.5005083\n5.024755\n4.727998\n4.483847\n\n\nA2M\n9.194799\n10.1547792\n9.737704\n10.057380\n10.785510\n\n\n\n\n\n\n\nCode\n# read survival data\nsurv &lt;- read.csv(\"../1_processed/TCGA_lung_survival.csv\", row.names = 1)\ncolnames(surv) &lt;- gsub(\"\\\\.\", \"_\", colnames(surv))\n\n# remove time &lt; 0 or NA\nsurv &lt;- surv %&gt;% filter(!is.na(PFI_time_1))\nsurv$PFI_time_1 &lt;- as.numeric(surv$PFI_time_1)/365.25\nsurv$PFI_1 &lt;- as.numeric(surv$PFI_1)\n\n# set max PFI to 10 years\nsurv$PFI_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 0, surv$PFI_1)\nsurv$PFI_time_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 10, surv$PFI_time_1)\nsurv &lt;- surv[surv$PFI_time_1 &gt; 0, ]\n\n# create survival object\nsurv$PFI &lt;- Surv(surv$PFI_time_1, surv$PFI_1)\nhead(surv)\n\n\n\nA data.frame: 6 × 18\n\n\n\ntype\nPFI_1\nPFI_time_1\nPFI_2\nPFI_time_2\nPFS\nPFS_time\nDSS_cr\nDSS_time_cr\nDFI_cr\nDFI_time_cr\nPFI_cr\nPFI_time_cr\nPFI_1_cr\nPFI_time_1_cr\nPFI_2_cr\nPFI_time_2_cr\nPFI\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;Surv&gt;\n\n\n\n\nTCGA-05-4249\nLUAD\n0\n4.1697467\n0\n1523\n0\n1523\n0\n1523\nNA\nNA\n0\n1523\n0\n1523\n0\n1523\n4.1697467, 0\n\n\nTCGA-05-4250\nLUAD\n0\n0.3312799\n0\n121\n1\n121\nNA\n121\nNA\nNA\n2\n121\n2\n121\n2\n121\n0.3312799, 0\n\n\nTCGA-05-4382\nLUAD\n1\n0.9144422\n1\n334\n1\n334\n0\n607\n1\n334\n1\n334\n1\n334\n1\n334\n0.9144422, 1\n\n\nTCGA-05-4384\nLUAD\n1\n0.5010267\n1\n183\n1\n183\n0\n426\nNA\nNA\n1\n183\n1\n183\n1\n183\n0.5010267, 1\n\n\nTCGA-05-4389\nLUAD\n0\n3.7481177\n0\n1369\n0\n1369\n0\n1369\nNA\nNA\n0\n1369\n0\n1369\n0\n1369\n3.7481177, 0\n\n\nTCGA-05-4390\nLUAD\n1\n1.0814511\nNA\nNA\n1\n395\n0\n1126\nNA\nNA\n1\n395\n1\n395\nNA\nNA\n1.0814511, 1\n\n\n\n\n\n\n\nCode\n# merge expression with survival data\nsurv &lt;- cbind(surv, t(gex)[rownames(surv),])\nsurv[1:5, 15:20]\n\n\n\nA data.frame: 5 × 6\n\n\n\nPFI_time_1_cr\nPFI_2_cr\nPFI_time_2_cr\nPFI\nA1BG\nA1CF\n\n\n\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;Surv&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nTCGA-05-4249\n1523\n0\n1523\n4.1697467, 0\n4.796906\n0.2791457\n\n\nTCGA-05-4250\n121\n2\n121\n0.3312799, 0\n3.948542\n0.0000000\n\n\nTCGA-05-4382\n334\n1\n334\n0.9144422, 1\n4.989779\n0.0000000\n\n\nTCGA-05-4384\n183\n1\n183\n0.5010267, 1\n4.854893\n0.0000000\n\n\nTCGA-05-4389\n1369\n0\n1369\n3.7481177, 0\n4.221578\n3.6174264",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generating Prognostic Signature</span>"
    ]
  },
  {
    "objectID": "metastatic_signature2.html#univariate-analysis",
    "href": "metastatic_signature2.html#univariate-analysis",
    "title": "2  Generating Prognostic Signature",
    "section": "2.3 Univariate Analysis",
    "text": "2.3 Univariate Analysis\n\n2.3.1 All LUNG\nRemoved patients without outcome/survival time = 0, then do univariate cox regression to filter prognostic genes (4184, p &lt; 0.05). Performed lasso-cox regression (a = 1, nfolds = 5) resulting in 151 prognostic genes.\n\n\nCode\nlibrary(survival)\nlibrary(doParallel)\nlibrary(foreach)\n\n# Set up parallel backend\nnum_cores &lt;- 30  # Use all available cores minus one\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\n# Initialize parallel processing\nunivariate.genes &lt;- foreach(gene = rownames(gex), .combine = rbind, .packages = c(\"survival\")) %dopar% {\n    # Create formula dynamically\n    formula &lt;- as.formula(paste0(\"PFI ~ `\", gene, \"`\"))\n    \n    # Fit Cox model\n    cox &lt;- summary(coxph(formula, data = surv))\n    \n    # Extract hazard ratio (HR) and p-value\n    hr &lt;- as.data.frame(cox$coef)[[2]][1]\n    pvalue &lt;- as.data.frame(cox$coef)[[5]][1]\n    \n    # Return results as a data frame\n    data.frame(gene = gene, hr = hr, pvalue = pvalue)\n}\n\n# Stop parallel backend\nstopCluster(cl)\n\n# View results\nhead(univariate.genes)\n\n\n\nA data.frame: 6 × 3\n\n\n\ngene\nhr\npvalue\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\nA1BG\n0.9704959\n0.618871566\n\n\n2\nA1CF\n1.0644249\n0.374985739\n\n\n3\nA2BP1\n0.9554042\n0.353871226\n\n\n4\nA2LD1\n1.2651549\n0.051995061\n\n\n5\nA2M\n1.0336125\n0.521458510\n\n\n6\nA2ML1\n0.9438323\n0.002350159\n\n\n\n\n\n\n\nCode\n# filter genes with univariate-cox &lt; 0.05\nuni &lt;- univariate.genes$gene[which(univariate.genes$pvalue &lt; 0.05)]\nlength(uni)\nuni\n\n\n4184\n\n\n\n'A2ML1''A4GALT''AADAC''AADACL2''ABCA13''ABCA5''ABCC1''ABCC3''ABCC5''ABCC6''ABCC6P1''ABCD1''ABCF3''ABCG5''ABHD10''ABHD6''ABI1''ABI2''ABL1''ABL2''ABLIM3''ABP1''ACAD11''ACAD9''ACAP1''ACAP2''ACBD5''ACCN2''ACCN4''ACCSL''ACO1''ACO2''ACOT2''ACOT4''ACOT6''ACOT9''ACOX2''ACP2''ACPL2''ACPP''ACSBG1''ACSF2''ACSF3''ACSL3''ACSL4''ACSL5''ACSS1''ACTL6A''ACTN1''ACVR1C''ACY3''ADAD2''ADAL''ADAM20''ADAM23''ADAM6''ADAM8''ADAMTS17''ADAMTS20''ADAMTS6''ADAMTS7''ADAMTS9''ADAP1''ADAR''ADAT2''ADCY10''ADCY2''ADD1''ADD3''ADH1C''ADH5''ADH7''ADI1''ADORA1''ADPGK''ADRA1B''ADRA2B''ADSL''ADSS''ADSSL1''AEBP2''AFF1''AFF2''AFF4''AGA''AGAP11''AGFG1''AGGF1''AGK''AGL''AGPAT1''AGPAT2''AGPAT6''AGPS''AGR2''AGRN''AGT''AGXT2L1''AHCYL2''AHDC1''AHRR''AIDA''AIFM2''AIFM3''AIG1''AKAP12''AKAP2''AKAP3''AKAP6''AKAP7''AKAP8''AKR1A1''AKR1B10''AKR1C1''AKR1C2''ALDH16A1''ALDH1A1''ALDH3A1''ALDH3B1''ALDH3B2''ALDH4A1''ALDH7A1''ALDH8A1''ALDOC''ALG1L''ALG3''ALK''ALKBH2''ALKBH3''ALKBH7''ALOX12''ALOX15''ALPI''ALPK3''ALPP''ALPPL2''ALS2''ALS2CR4''AMD1''AMDHD1''AMIGO2''AMPD1''AMTN''ANAPC13''ANAPC5''ANAPC7''ANG''ANGPTL4''ANGPTL6''ANKFY1''ANKK1''ANKRD13B''ANKRD16''ANKRD2''ANKRD20A3''ANKRD20B''ANKRD28''ANKRD32''ANKRD49''ANKRD54''ANKRD9''ANO10''ANO3''ANO5''ANO6''ANO7''ANP32C''ANP32E''ANTXR2''ANXA11''ANXA2P1''ANXA5''ANXA8''ANXA8L2''ANXA9''AOAH''AOX2P''AP1B1''AP1S3''AP2A2''AP2B1''AP2M1''AP3B1''AP3B2''AP3S1''AP4S1''APAF1''APBB1''APBB2''APCDD1''APCDD1L''APEX2''APOB''APOBEC1''APOBEC3A''APOBEC3B''APOBEC3C''APOBEC3D''APOBEC3F''APOC3'⋯'VEPH1''VEZT''VGF''VGLL3''VIPR2''VIT''VMA21''VMAC''VPREB3''VPS18''VPS33A''VPS37B''VPS8''VSIG10''VSNL1''VSTM2L''VTCN1''VTI1B''VTN''VWC2''VWCE''WASF1''WASF2''WASL''WDFY2''WDR34''WDR37''WDR44''WDR47''WDR53''WDR55''WDR59''WDR5B''WDR60''WDR61''WDR66''WDR69''WDR70''WDR72''WDR77''WDR83''WDR91''WFDC10A''WFDC5''WFDC9''WHAMM''WHSC1L1''WIPI1''WNK2''WNT2B''WNT3A''WNT5A''WNT7B''WSCD1''WSCD2''WTAP''WWC1''WWC2''XAGE1D''XAGE2''XCL2''XCR1''XDH''XG''XIAP''XKR3''XPNPEP1''XPNPEP3''XRCC4''XRCC5''XYLB''YBX1''YEATS2''YIPF1''YIPF5''YPEL2''ZBED5''ZBTB10''ZBTB11''ZBTB32''ZBTB42''ZBTB44''ZBTB5''ZBTB7C''ZC3H13''ZC3H14''ZCWPW1''ZDHHC11''ZDHHC21''ZDHHC8''ZDHHC9''ZFHX3''ZFP42''ZFP64''ZFR''ZFX''ZFYVE16''ZG16''ZHX2''ZIC2''ZIC5''ZMAT3''ZMAT5''ZMYM6''ZNF124''ZNF131''ZNF136''ZNF137''ZNF148''ZNF16''ZNF160''ZNF174''ZNF202''ZNF22''ZNF239''ZNF25''ZNF254''ZNF266''ZNF273''ZNF274''ZNF276''ZNF28''ZNF281''ZNF3''ZNF304''ZNF317''ZNF318''ZNF32''ZNF330''ZNF337''ZNF350''ZNF385A''ZNF389''ZNF394''ZNF395''ZNF415''ZNF436''ZNF44''ZNF440''ZNF444''ZNF467''ZNF468''ZNF488''ZNF490''ZNF498''ZNF512''ZNF519''ZNF525''ZNF543''ZNF556''ZNF557''ZNF559''ZNF561''ZNF562''ZNF563''ZNF564''ZNF57''ZNF575''ZNF578''ZNF579''ZNF585A''ZNF589''ZNF596''ZNF610''ZNF611''ZNF613''ZNF620''ZNF638''ZNF639''ZNF655''ZNF658''ZNF665''ZNF673''ZNF691''ZNF700''ZNF701''ZNF702P''ZNF706''ZNF711''ZNF74''ZNF740''ZNF750''ZNF77''ZNF774''ZNF780A''ZNF789''ZNF791''ZNF808''ZNF833''ZNF860''ZNF880''ZNFX1''ZNRF1''ZNRF3''ZSCAN16''ZSCAN5A''ZSWIM5''ZW10''ZXDB''ZXDC'\n\n\n\n\nCode\n# do lasso cox regression to shrink important genes\nX &lt;- t(gex[uni, rownames(surv)])\ny &lt;- Surv(surv$PFI_time_1, surv$PFI_1)\ncv.lasso_cox &lt;- cv.glmnet(X, y, family = \"cox\", alpha = 1, nfolds = 5, type.measure=\"C\")\n\n# filter important genes\ncoef_lasso &lt;- coef(cv.lasso_cox, s = \"lambda.min\")\nlasso_genes &lt;- rownames(coef_lasso)[which(coef_lasso[,1] &gt; 0)]\nprint(lasso_genes)\n\n\n  [1] \"ABCD1\"        \"ABCF3\"        \"ADAMTS9\"      \"ANKRD32\"      \"AP3B1\"       \n  [6] \"AP3S1\"        \"AP4S1\"        \"AQP10\"        \"AQP7P1\"       \"AQP7P3\"      \n [11] \"ATG10\"        \"C11orf36\"     \"C14orf53\"     \"C17orf85\"     \"C20orf141\"   \n [16] \"C2orf54\"      \"C2orf82\"      \"C5orf36\"      \"C5orf43\"      \"C6orf195\"    \n [21] \"C8orf74\"      \"CDHR5\"        \"CLRN2\"        \"CRIM1\"        \"CT47A10\"     \n [26] \"CTNNA2\"       \"CTNS\"         \"DEFB123\"      \"DEFB132\"      \"DHRS7C\"      \n [31] \"DKK1\"         \"DLEU7\"        \"DNAJA1\"       \"DSCAM\"        \"DYSFIP1\"     \n [36] \"EBF2\"         \"EML6\"         \"ENOSF1\"       \"ERLIN1\"       \"FADD\"        \n [41] \"FAM9A\"        \"FER\"          \"FGF4\"         \"FKBP3\"        \"FLJ40434\"    \n [46] \"FLJ44054\"     \"FLJ46111\"     \"FUBP1\"        \"GLDC\"         \"GRB10\"       \n [51] \"GYPB\"         \"H19\"          \"H6PD\"         \"HNRNPA0\"      \"HOXB4\"       \n [56] \"HPX\"          \"HSD3B2\"       \"HSF2BP\"       \"HSPA1L\"       \"IGSF5\"       \n [61] \"INCA1\"        \"IRS1\"         \"KCNJ2\"        \"KCNT1\"        \"KHDRBS3\"     \n [66] \"KHNYN\"        \"KIAA1919\"     \"KIF4B\"        \"KLF10\"        \"KLK4\"        \n [71] \"KSR2\"         \"LBX2\"         \"LINGO1\"       \"LOC100130987\" \"LOC100131726\"\n [76] \"LOC100134868\" \"LOC360030\"    \"LOC387647\"    \"LOC652276\"    \"LRRC4\"       \n [81] \"LRRIQ4\"       \"LST-3TM12\"    \"MAGEA8\"       \"MAPK10\"       \"METT10D\"     \n [86] \"MFSD11\"       \"MGC34034\"     \"MRAP\"         \"MRPL33\"       \"NANOG\"       \n [91] \"NLRP13\"       \"NLRP8\"        \"NRG3\"         \"OPRM1\"        \"OR2W3\"       \n [96] \"PABPC3\"       \"PAOX\"         \"PCDHA3\"       \"PDE10A\"       \"PHF23\"       \n[101] \"PLEK2\"        \"PLXNA4\"       \"POMT1\"        \"PPM1B\"        \"PPP1R15B\"    \n[106] \"PRSS50\"       \"RAB41\"        \"RAD23B\"       \"RASAL1\"       \"RBMY1A3P\"    \n[111] \"RBMY2FP\"      \"RCN1\"         \"RPE\"          \"RPL9\"         \"SCGB2A2\"     \n[116] \"SDCBP\"        \"SHPK\"         \"SLC16A13\"     \"SLC26A8\"      \"SNAR-C4\"     \n[121] \"SNAR-G1\"      \"SNORA52\"      \"SNORD89\"      \"SPACA3\"       \"SPANXN4\"     \n[126] \"SRGAP1\"       \"SRGAP3\"       \"STC1\"         \"STK3\"         \"SUN5\"        \n[131] \"TBC1D3P2\"     \"TBPL2\"        \"TEX15\"        \"TFAMP1\"       \"TM7SF2\"      \n[136] \"TMED7-TICAM2\" \"TOR1B\"        \"TRAPPC9\"      \"TRIM68\"       \"TUSC5\"       \n[141] \"UBTFL1\"       \"UGT1A8\"       \"UNCX\"         \"VPS8\"         \"WFDC9\"       \n[146] \"XKR3\"         \"ZFP42\"        \"ZG16\"         \"ZNF160\"       \"ZNF525\"      \n[151] \"ZNF611\"      \n\n\n\n\nCode\nwrite.table(lasso_genes, \"../2_metastatic_genes/TCGA_lung_univariate_lasso.txt\", col.names = F, row.names = F, quote = F, sep = \"\\t\")\n\n\n\n\n2.3.2 LUSC\nLUSC patients only, univariate cox regression to filter prognostic genes (1917, p &lt; 0.05). Performed lasso-cox regression (a = 1, nfolds = 5) resulting in 97 prognostic genes.\n\n\nCode\nLUSC &lt;- surv %&gt;% \n    filter(type == \"LUSC\")\ndim(LUSC)\n\n\n\n49520519\n\n\n\n\nCode\nlibrary(survival)\nlibrary(doParallel)\nlibrary(foreach)\n\n# Set up parallel backend\nnum_cores &lt;- 30  # Use all available cores minus one\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\n# Initialize parallel processing\nunivariate.genes &lt;- foreach(gene = rownames(gex), .combine = rbind, .packages = c(\"survival\")) %dopar% {\n    # Create formula dynamically\n    formula &lt;- as.formula(paste0(\"PFI ~ `\", gene, \"`\"))\n    \n    # Fit Cox model\n    cox &lt;- summary(coxph(formula, data = LUSC))\n    \n    # Extract hazard ratio (HR) and p-value\n    hr &lt;- as.data.frame(cox$coef)[[2]][1]\n    pvalue &lt;- as.data.frame(cox$coef)[[5]][1]\n    \n    # Return results as a data frame\n    data.frame(gene = gene, hr = hr, pvalue = pvalue)\n}\n\n# Stop parallel backend\nstopCluster(cl)\n\n# View results\nhead(univariate.genes)\n\n\n\nA data.frame: 6 × 3\n\n\n\ngene\nhr\npvalue\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\nA1BG\n0.9488596\n0.60050772\n\n\n2\nA1CF\n0.8108010\n0.57331082\n\n\n3\nA2BP1\n0.9169648\n0.32849577\n\n\n4\nA2LD1\n0.8005384\n0.24910305\n\n\n5\nA2M\n1.0612524\n0.46178884\n\n\n6\nA2ML1\n0.9281850\n0.04752442\n\n\n\n\n\n\n\nCode\n# filter genes with univariate-cox &lt; 0.05\nuni &lt;- univariate.genes$gene[which(univariate.genes$pvalue &lt; 0.05)]\nlength(uni)\nuni\n\n\n1917\n\n\n\n'A2ML1''AADACL2''ABCA13''ABCA2''ABCA3''ABCB10''ABCC5''ABCD1''ABCF1''ABCG1''ABHD10''ABI2''ABL1''ABL2''ABLIM3''ABP1''ABR''ABTB2''ACN9''ACO2''ACOT11''ACPL2''ACTG1''ACTN1''ADAD2''ADAM21''ADAM21P1''ADAMTS15''ADAMTS17''ADAMTSL4''ADAT1''ADCY2''ADCY7''ADCYAP1R1''ADD1''ADH1C''ADH7''ADI1''ADRA2C''ADSS''ADSSL1''AES''AFF1''AGAP1''AGBL1''AGL''AGPAT2''AGPHD1''AGPS''AIFM2''AIMP2''AJAP1''AK1''AKAP12''AKR1A1''AKR1D1''ALDH3B1''ALDH3B2''ALDH7A1''ALG14''ALKBH2''ALKBH3''ALKBH7''ALPI''ALPK3''ALPP''ALPPL2''ALS2''AMBP''ANAPC13''ANAPC2''ANAPC5''ANGEL2''ANKFY1''ANKRD16''ANKRD27''ANKRD46''ANKRD9''ANKS1B''ANO5''ANTXRL''AP1S3''AP2A2''AP2B1''AP2M1''AP3B2''AP4B1''APBB2''APCDD1L''APOBEC3C''APOD''AQP7P1''AQP7P3''ARC''AREG''ARHGAP24''ARHGAP39''ARHGEF10''ARHGEF17''ARHGEF2''ARHGEF38''ARHGEF4''ARMC9''ARPC5L''ARSG''ARV1''AS3MT''ASAP2''ASB1''ASB6''ASH2L''ASNA1''ASTE1''ASXL1''ASXL2''ATAD1''ATG4D''ATP10A''ATP11A''ATP13A5''ATP1B3''ATP5F1''ATP5G1''ATP5G2''ATP5G3''ATP5L''ATP5O''ATP6AP1''ATP6V1E1''ATP7B''ATP8A1''ATP9A''ATPIF1''ATXN1L''ATXN2''B3GALT5''B3GNT3''B3GNT7''B4GALT5''BAG4''BAHCC1''BAI3''BAP1''BASE''BAT2''BAT2L1''BAZ2A''BAZ2B''BCAR3''BCL11A''BCL2L2''BCORL1''BDH1''BDP1''BHLHE40''BHMT2''BICD1''BID''BIRC6''BLK''BMI1''BMP7''BMPR2''BNC1''BOD1L''BOLA1''BPNT1''BRF2''BRIX1''BRPF1''BRPF3''BRSK2''BSPRY''BTBD2''BTBD3''BTBD8''BTBD9''BTG1''BTLA''BTN1A1''BTN2A1''BZW2''C10orf41''C10orf99''C11orf1''C11orf20''C11orf36''C11orf71''C11orf86''C11orf9''C12orf51''C12orf54''C13orf29''C13orf37''C14orf118''C14orf135''C14orf162''C14orf167''C14orf174''C14orf21'⋯'TPST2''TRAF2''TRAK2''TRAPPC1''TRAPPC5''TRAPPC9''TREX1''TRIB1''TRIM10''TRIM15''TRIM29''TRIM3''TRIM35''TRIM36''TRIM39''TRIM44''TRIM48''TRIM5''TRIM56''TRIM58''TRIM60''TRIM68''TRIML1''TRIML2''TRIP12''TRMT1''TRMT2A''TRPM6''TRPV4''TRUB1''TSC1''TSNAX''TSR1''TTC23''TTC26''TTC37''TTC7A''TTF1''TTLL11''TTLL4''TTPAL''TUBAL3''TUBB3''TUBD1''TXN2''TXNL4A''TYMS''UBASH3B''UBE2DNL''UBR1''UBR4''UBTFL1''UBXN2B''UBXN6''UCK1''UFD1L''UGGT2''UGT1A6''UGT2A1''UNC119''UNC13D''UNC93B1''UNCX''UQCR10''UQCR11''UQCRC1''UQCRH''USE1''USP17L2''USP32''USP40''USP43''USP47''UTRN''UXT''VAT1''VAV2''VCY''VEGFA''VEZT''VGF''VMAC''VPREB3''VPS13C''VPS37B''VPS53''VSIG10''VWA2''WARS2''WDFY3''WDR31''WDR44''WDR47''WDR77''WDR85''WFDC13''WFDC5''WFS1''WHSC1''WIPF2''WIPI1''WNT1''WNT2B''WNT5A''WNT7A''WSCD1''WSCD2''WWC1''XAGE2''XG''XIAP''XKR7''XRCC6BP1''YBX1''YEATS4''YLPM1''YTHDF1''YY2''ZBTB10''ZBTB26''ZBTB44''ZBTB7C''ZC3H13''ZC3HAV1''ZER1''ZFP28''ZFP42''ZFP92''ZFYVE20''ZFYVE26''ZIC2''ZIM2''ZMYM2''ZMYM6''ZNF142''ZNF160''ZNF165''ZNF174''ZNF192''ZNF235''ZNF239''ZNF24''ZNF256''ZNF268''ZNF273''ZNF274''ZNF28''ZNF281''ZNF32''ZNF329''ZNF330''ZNF331''ZNF350''ZNF354C''ZNF397''ZNF417''ZNF418''ZNF432''ZNF445''ZNF525''ZNF549''ZNF557''ZNF57''ZNF576''ZNF578''ZNF589''ZNF596''ZNF610''ZNF611''ZNF613''ZNF615''ZNF616''ZNF620''ZNF627''ZNF630''ZNF638''ZNF649''ZNF664''ZNF665''ZNF703''ZNF706''ZNF711''ZNF749''ZNF761''ZNF765''ZNF77''ZNF780A''ZNF8''ZNF808''ZNF813''ZNF835''ZNF841''ZNF845''ZNF860''ZNFX1''ZNRF2''ZSCAN22''ZSWIM6''ZSWIM7''ZZEF1'\n\n\n\n\nCode\n# do lasso cox regression to shrink important genes\nX &lt;- t(gex[uni, rownames(LUSC)])\ny &lt;- Surv(LUSC$PFI_time_1, LUSC$PFI_1)\ncv.lasso_cox &lt;- cv.glmnet(X, y, family = \"cox\", alpha = 1, nfolds = 5, type.measure=\"C\")\n\n# filter important genes\ncoef_lasso &lt;- coef(cv.lasso_cox, s = \"lambda.min\")\nlasso_genes &lt;- rownames(coef_lasso)[which(coef_lasso[,1] &gt; 0)]\nprint(lasso_genes)\n\n\n [1] \"ABCG1\"        \"ADRA2C\"       \"ANTXRL\"       \"AP1S3\"        \"ATP6AP1\"     \n [6] \"B3GALT5\"      \"BCL2L2\"       \"BICD1\"        \"C14orf135\"    \"C2orf70\"     \n[11] \"C8orf74\"      \"C9orf131\"     \"CACNA1F\"      \"CCDC144B\"     \"CDH4\"        \n[16] \"CLDN22\"       \"CLPS\"         \"CTSL3\"        \"CTTN\"         \"CXorf56\"     \n[21] \"DCD\"          \"DEFB123\"      \"DLEU7\"        \"DNAL1\"        \"DSG2\"        \n[26] \"DUSP15\"       \"FLJ35776\"     \"FLJ40434\"     \"FLOT1\"        \"GALNTL5\"     \n[31] \"GPR78\"        \"GSC\"          \"HCRTR1\"       \"HOXD12\"       \"IBTK\"        \n[36] \"IKBKAP\"       \"IL3\"          \"ITGB1BP3\"     \"KLK8\"         \"KSR2\"        \n[41] \"LOC100133545\" \"LOC127841\"    \"LOC360030\"    \"LOC55908\"     \"LOC728875\"   \n[46] \"LRRC20\"       \"MAGEB2\"       \"MARK3\"        \"MBOAT2\"       \"MYEOV\"       \n[51] \"NKX2-2\"       \"NPLOC4\"       \"NR6A1\"        \"OR2W3\"        \"OR56A3\"      \n[56] \"PALM3\"        \"PCDHA3\"       \"PCDHGB4\"      \"PDCL2\"        \"PDE10A\"      \n[61] \"PITPNA\"       \"POMT1\"        \"PTPRA\"        \"RBMY1A3P\"     \"RBMY1E\"      \n[66] \"RBMY2FP\"      \"RDH14\"        \"RECQL\"        \"RING1\"        \"RPH3AL\"      \n[71] \"SCGB2A2\"      \"SCGBL\"        \"SERPIND1\"     \"SHPK\"         \"SLC22A13\"    \n[76] \"SMOX\"         \"SMPX\"         \"SNORD89\"      \"SOX9\"         \"SPANXN3\"     \n[81] \"SPANXN4\"      \"SSX1\"         \"STC2\"         \"SUN5\"         \"SYT3\"        \n[86] \"TBPL2\"        \"TMEM105\"      \"TRPM6\"        \"TYMS\"         \"UNCX\"        \n[91] \"USP40\"        \"VEZT\"         \"WFDC13\"       \"ZFP42\"        \"ZNF350\"      \n[96] \"ZNF397\"       \"ZSWIM6\"      \n\n\n\n\nCode\nwrite.table(lasso_genes, \"../2_metastatic_genes/TCGA_LUSC_univariate_lasso.txt\", col.names = F, row.names = F, quote = F, sep = \"\\t\")\n\n\n\n\n2.3.3 LUAD\nLUAD patients only, univariate cox regression to filter prognostic genes (3654, p &lt; 0.05). Performed lasso-cox regression (a = 1, nfolds = 5) resulting in 110 prognostic genes.\n\n\nCode\nLUAD &lt;- surv %&gt;% \n    filter(type == \"LUAD\")\ndim(LUAD)\n\n\n\n50320519\n\n\n\n\nCode\nlibrary(survival)\nlibrary(doParallel)\nlibrary(foreach)\n\n# Set up parallel backend\nnum_cores &lt;- 30  # Use all available cores minus one\ncl &lt;- makeCluster(num_cores)\nregisterDoParallel(cl)\n\n# Initialize parallel processing\nunivariate.genes &lt;- foreach(gene = rownames(gex), .combine = rbind, .packages = c(\"survival\")) %dopar% {\n    # Create formula dynamically\n    formula &lt;- as.formula(paste0(\"PFI ~ `\", gene, \"`\"))\n    \n    # Fit Cox model\n    cox &lt;- summary(coxph(formula, data = LUAD))\n    \n    # Extract hazard ratio (HR) and p-value\n    hr &lt;- as.data.frame(cox$coef)[[2]][1]\n    pvalue &lt;- as.data.frame(cox$coef)[[5]][1]\n    \n    # Return results as a data frame\n    data.frame(gene = gene, hr = hr, pvalue = pvalue)\n}\n\n# Stop parallel backend\nstopCluster(cl)\n\n# View results\nhead(univariate.genes)\n\n\n\nA data.frame: 6 × 3\n\n\n\ngene\nhr\npvalue\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\n1\nA1BG\n0.9185667\n0.257531683\n\n\n2\nA1CF\n1.0252673\n0.731421619\n\n\n3\nA2BP1\n0.9678568\n0.577254467\n\n\n4\nA2LD1\n1.5394511\n0.005534639\n\n\n5\nA2M\n0.8168842\n0.012737910\n\n\n6\nA2ML1\n1.1104490\n0.007959814\n\n\n\n\n\n\n\nCode\n# filter genes with univariate-cox &lt; 0.05\nuni &lt;- univariate.genes$gene[which(univariate.genes$pvalue &lt; 0.05)]\nlength(uni)\nuni\n\n\n3654\n\n\n\n'A2LD1''A2M''A2ML1''ABAT''ABCA10''ABCA13''ABCA3''ABCA8''ABCC11''ABCC12''ABCC4''ABCC6''ABCC6P1''ABCC6P2''ABCC8''ABHD14B''ABHD6''ABI3''ABI3BP''ABR''ABTB1''ACAD8''ACADS''ACADSB''ACAN''ACAP1''ACAT1''ACBD4''ACCN4''ACCS''ACCSL''ACE''ACHE''ACOT12''ACOXL''ACP1''ACP5''ACPL2''ACPP''ACRBP''ACRV1''ACSBG1''ACSF3''ACSL3''ACSL5''ACSM3''ACSM5''ACSS1''ACTB''ACTL6A''ACTN1''ACTN4''ACTR2''ACTR3''ACVRL1''ADA''ADAM10''ADAM12''ADAM5P''ADAM6''ADAMTS17''ADAMTS20''ADAMTS4''ADAMTS6''ADAMTS8''ADAMTSL2''ADC''ADCY4''ADCY6''ADCY9''ADCYAP1R1''ADH1A''ADH1B''ADH7''ADHFE1''ADIPOQ''ADIPOR2''ADM''ADORA2A''ADRB2''AGAP11''AGAP2''AGAP3''AGAP4''AGAP5''AGAP7''AGBL2''AGER''AGFG1''AGFG2''AGMAT''AGPAT5''AGPS''AHNAK2''AHRR''AHSA1''AHSG''AIFM3''AIMP2''AK1''AK2''AKAP1''AKAP12''AKAP13''AKAP14''AKAP3''AKD1''AKNA''AKT2''ALDH2''ALDH4A1''ALDOA''ALG10''ALG3''ALG8''ALK''ALOX15''ALOX5''ALOXE3''ALPI''ALPL''ALS2CR12''ALX1''AMBP''AMDHD1''AMICA1''AMPD1''AMT''ANGPTL4''ANGPTL5''ANGPTL6''ANK2''ANKHD1''ANKK1''ANKMY1''ANKRD13A''ANKRD20A3''ANKRD32''ANKRD44''ANKRD55''ANKRD57''ANKRD6''ANLN''ANO10''ANO2''ANO9''ANP32A''ANP32B''ANP32E''ANXA2P1''AOX2P''AP1S3''AP2A1''AP2M1''AP2S1''AP3B1''AP3S1''APCDD1L''APLP2''APOB48R''APOBEC1''APOBEC3A''APOBEC3H''APOBEC4''APOC4''APOH''AQP3''AQP4''AQP5''AQP7''ARAP1''ARFGAP2''ARHGAP11A''ARHGAP11B''ARHGAP15''ARHGAP24''ARHGAP25''ARHGAP27''ARHGAP30''ARHGAP9''ARHGDIB''ARHGEF15''ARHGEF17''ARHGEF2''ARHGEF3''ARHGEF37''ARHGEF38''ARHGEF6''ARID3A''ARIH2''ARL6IP1''ARL6IP6''ARMC5''ARNTL2''ARPM1''ARRB1''ARRB2''ARVCF''ASAH2''ASAP3'⋯'WDR59''WDR5B''WDR6''WDR62''WDR67''WDR75''WDR76''WDR83''WDR87''WDR91''WDR93''WDTC1''WFDC13''WFDC6''WFIKKN2''WIF1''WIPI2''WIT1''WLS''WNT2B''WNT3A''WSCD2''WWP2''XBP1''XCR1''XPO1''XRCC2''XRCC4''XRCC5''YARS2''YEATS4''YES1''YKT6''YPEL1''YSK4''YWHAG''YWHAQ''YWHAZ''YY1''ZAP70''ZBED5''ZBTB3''ZBTB32''ZBTB40''ZBTB46''ZBTB48''ZBTB5''ZBTB7C''ZC3H12D''ZC3H15''ZCCHC24''ZCWPW1''ZDHHC1''ZDHHC11''ZER1''ZFAND2A''ZFAND2B''ZFP2''ZFP28''ZFP3''ZFP90''ZFR2''ZFYVE27''ZG16''ZMYM6''ZMYND10''ZMYND12''ZMYND15''ZNF10''ZNF100''ZNF136''ZNF14''ZNF140''ZNF141''ZNF146''ZNF154''ZNF16''ZNF165''ZNF17''ZNF175''ZNF185''ZNF187''ZNF19''ZNF20''ZNF204P''ZNF207''ZNF211''ZNF238''ZNF24''ZNF248''ZNF25''ZNF250''ZNF253''ZNF257''ZNF266''ZNF271''ZNF276''ZNF281''ZNF3''ZNF304''ZNF322A''ZNF322B''ZNF323''ZNF333''ZNF337''ZNF345''ZNF347''ZNF362''ZNF37B''ZNF394''ZNF396''ZNF397''ZNF397OS''ZNF404''ZNF429''ZNF43''ZNF431''ZNF433''ZNF439''ZNF44''ZNF440''ZNF441''ZNF442''ZNF443''ZNF451''ZNF470''ZNF471''ZNF483''ZNF486''ZNF490''ZNF491''ZNF493''ZNF497''ZNF502''ZNF506''ZNF512''ZNF512B''ZNF526''ZNF536''ZNF540''ZNF541''ZNF546''ZNF547''ZNF548''ZNF549''ZNF563''ZNF564''ZNF574''ZNF576''ZNF577''ZNF582''ZNF589''ZNF596''ZNF608''ZNF626''ZNF655''ZNF658''ZNF671''ZNF677''ZNF680''ZNF682''ZNF69''ZNF691''ZNF700''ZNF703''ZNF704''ZNF708''ZNF709''ZNF71''ZNF721''ZNF727''ZNF732''ZNF737''ZNF750''ZNF763''ZNF77''ZNF773''ZNF778''ZNF781''ZNF782''ZNF789''ZNF799''ZNF80''ZNF831''ZNF835''ZNF836''ZNF844''ZNF85''ZNF862''ZNF876P''ZNF879''ZNF91''ZNRF3''ZSCAN1''ZSCAN18''ZSCAN4''ZSWIM7''ZWILCH''ZWINT''ZXDC'\n\n\n\n\nCode\n# do lasso cox regression to shrink important genes\nX &lt;- t(gex[uni, rownames(LUAD)])\ny &lt;- Surv(LUAD$PFI_time_1, LUAD$PFI_1)\ncv.lasso_cox &lt;- cv.glmnet(X, y, family = \"cox\", alpha = 1, nfolds = 5, type.measure=\"C\")\n\n# filter important genes\ncoef_lasso &lt;- coef(cv.lasso_cox, s = \"lambda.min\")\nlasso_genes &lt;- rownames(coef_lasso)[which(coef_lasso[,1] &gt; 0)]\nprint(lasso_genes)\n\n\n  [1] \"ACOT12\"       \"ACOXL\"        \"ADAM5P\"       \"ARPM1\"        \"ATG10\"       \n  [6] \"B3GALTL\"      \"BANP\"         \"C14orf145\"    \"C18orf2\"      \"C1orf94\"     \n [11] \"C6orf195\"     \"C7orf28A\"     \"CCDC126\"      \"CRCT1\"        \"CUL4A\"       \n [16] \"DAB1\"         \"DAOA\"         \"DGKK\"         \"DHRS7C\"       \"DISC2\"       \n [21] \"DKK1\"         \"DLX1\"         \"DNAJC1\"       \"EFNB2\"        \"ELOVL7\"      \n [26] \"FANCL\"        \"FGF6\"         \"FNDC4\"        \"FTSJ2\"        \"FUNDC2P2\"    \n [31] \"GAL3ST3\"      \"GCKR\"         \"GDPD2\"        \"GLRA4\"        \"GNGT1\"       \n [36] \"GOPC\"         \"GPX5\"         \"GRAMD1B\"      \"HGSNAT\"       \"HIST1H2AL\"   \n [41] \"HIST1H3I\"     \"HPX\"          \"HSPA6\"        \"INSL4\"        \"KCNA7\"       \n [46] \"KCNK2\"        \"KRT34\"        \"LDLRAD3\"      \"LINGO1\"       \"LIPK\"        \n [51] \"LOC100192426\" \"LOC148189\"    \"LOC653544\"    \"LOC728410\"    \"LRRC36\"      \n [56] \"LRRIQ4\"       \"MGC4473\"      \"MMP8\"         \"NCSTN\"        \"NLRP10\"      \n [61] \"NLRP13\"       \"NR5A1\"        \"NTSR1\"        \"OPRM1\"        \"OR10A5\"      \n [66] \"OR10K1\"       \"OR10X1\"       \"OR2F2\"        \"OR4D11\"       \"OR51T1\"      \n [71] \"OR5AC2\"       \"OR6Y1\"        \"OR7G1\"        \"OR7G2\"        \"OR8B12\"      \n [76] \"OR8B2\"        \"PABPC3\"       \"PARP1\"        \"PBX1\"         \"PDE7A\"       \n [81] \"PHKA1\"        \"PION\"         \"PITX3\"        \"PNPLA7\"       \"PRICKLE4\"    \n [86] \"RGS2\"         \"RILPL2\"       \"SAMD13\"       \"SAMD7\"        \"SCARNA14\"    \n [91] \"SCG5\"         \"SLC16A11\"     \"SLC16A13\"     \"SNORA5A\"      \"SNORA6\"      \n [96] \"SNORA78\"      \"SNORD22\"      \"SPANXN4\"      \"ST7OT4\"       \"TMEM106B\"    \n[101] \"TMEM44\"       \"TMEM64\"       \"TRIM6\"        \"TSPY4\"        \"TTC9\"        \n[106] \"TUSC5\"        \"UBTFL1\"       \"WIPI2\"        \"ZG16\"         \"ZNF574\"      \n\n\n\n\nCode\nwrite.table(lasso_genes, \"../2_metastatic_genes/TCGA_LUAD_univariate_lasso.txt\", col.names = F, row.names = F, quote = F, sep = \"\\t\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Generating Prognostic Signature</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html",
    "href": "ssgsea2.html",
    "title": "3  Risk Classification with ssGSEA",
    "section": "",
    "text": "3.1 Actions\nWe will now use the gene signatures to classify patients into low/high groups. This is done by:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#actions",
    "href": "ssgsea2.html#actions",
    "title": "3  Risk Classification with ssGSEA",
    "section": "",
    "text": "ssGSEA of gene sigature\nsplitting the score into 200 intervals and selecting the optimal cox-regression p value cutoff",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#format-data-for-ssgsea",
    "href": "ssgsea2.html#format-data-for-ssgsea",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.2 Format data for ssGSEA",
    "text": "3.2 Format data for ssGSEA\n\n\nCode\n# processed on NEMO so far\nset.seed(42)\nlibrary(tidyverse)\nlibrary(SummarizedExperiment)\nlibrary(readxl)\nlibrary(glmnet)\nlibrary(survival)\nsetwd(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/0_raw\")\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\nLoading required package: MatrixGenerics\n\nLoading required package: matrixStats\n\n\nAttaching package: ‘matrixStats’\n\n\nThe following object is masked from ‘package:dplyr’:\n\n    count\n\n\n\nAttaching package: ‘MatrixGenerics’\n\n\nThe following objects are masked from ‘package:matrixStats’:\n\n    colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse,\n    colCounts, colCummaxs, colCummins, colCumprods, colCumsums,\n    colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs,\n    colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats,\n    colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds,\n    colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads,\n    colWeightedMeans, colWeightedMedians, colWeightedSds,\n    colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet,\n    rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods,\n    rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps,\n    rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins,\n    rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks,\n    rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars,\n    rowWeightedMads, rowWeightedMeans, rowWeightedMedians,\n    rowWeightedSds, rowWeightedVars\n\n\nLoading required package: GenomicRanges\n\nLoading required package: stats4\n\nLoading required package: BiocGenerics\n\n\nAttaching package: ‘BiocGenerics’\n\n\nThe following objects are masked from ‘package:lubridate’:\n\n    intersect, setdiff, union\n\n\nThe following objects are masked from ‘package:dplyr’:\n\n    combine, intersect, setdiff, union\n\n\nThe following objects are masked from ‘package:stats’:\n\n    IQR, mad, sd, var, xtabs\n\n\nThe following objects are masked from ‘package:base’:\n\n    anyDuplicated, aperm, append, as.data.frame, basename, cbind,\n    colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find,\n    get, grep, grepl, intersect, is.unsorted, lapply, Map, mapply,\n    match, mget, order, paste, pmax, pmax.int, pmin, pmin.int,\n    Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort,\n    table, tapply, union, unique, unsplit, which.max, which.min\n\n\nLoading required package: S4Vectors\n\n\nAttaching package: ‘S4Vectors’\n\n\nThe following objects are masked from ‘package:lubridate’:\n\n    second, second&lt;-\n\n\nThe following objects are masked from ‘package:dplyr’:\n\n    first, rename\n\n\nThe following object is masked from ‘package:tidyr’:\n\n    expand\n\n\nThe following object is masked from ‘package:utils’:\n\n    findMatches\n\n\nThe following objects are masked from ‘package:base’:\n\n    expand.grid, I, unname\n\n\nLoading required package: IRanges\n\n\nAttaching package: ‘IRanges’\n\n\nThe following object is masked from ‘package:lubridate’:\n\n    %within%\n\n\nThe following objects are masked from ‘package:dplyr’:\n\n    collapse, desc, slice\n\n\nThe following object is masked from ‘package:purrr’:\n\n    reduce\n\n\nLoading required package: GenomeInfoDb\n\nLoading required package: Biobase\n\nWelcome to Bioconductor\n\n    Vignettes contain introductory material; view with\n    'browseVignettes()'. To cite Bioconductor, see\n    'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'.\n\n\n\nAttaching package: ‘Biobase’\n\n\nThe following object is masked from ‘package:MatrixGenerics’:\n\n    rowMedians\n\n\nThe following objects are masked from ‘package:matrixStats’:\n\n    anyMissing, rowMedians\n\n\nLoading required package: Matrix\n\n\nAttaching package: ‘Matrix’\n\n\nThe following object is masked from ‘package:S4Vectors’:\n\n    expand\n\n\nThe following objects are masked from ‘package:tidyr’:\n\n    expand, pack, unpack\n\n\nLoaded glmnet 4.1-8\n\n\n\n\n\nCode\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/coxph/coxph.R\")\n\n\n\n\nCode\n# read gene expression\ngex &lt;- read.csv(\"../1_processed/TCGA_lung_gex.csv\", row.names = 1)\ncolnames(gex) &lt;- gsub(\"\\\\.\", \"-\", colnames(gex))\ngex[1:5, 1:5]\n\n\n\nA data.frame: 5 × 5\n\n\n\nTCGA-05-4244\nTCGA-05-4249\nTCGA-05-4250\nTCGA-05-4382\nTCGA-05-4384\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nA1BG\n26.0302\n120.1350\n50.8597\n145.904\n127.3670\n\n\nA1CF\n0.0000\n0.3220\n0.0000\n0.000\n0.0000\n\n\nA2BP1\n1.7454\n1.6098\n0.0000\n0.000\n0.0000\n\n\nA2LD1\n135.5020\n89.0629\n151.1330\n112.069\n87.5748\n\n\nA2M\n9844.7900\n25712.7000\n16943.6000\n23326.300\n48314.6000\n\n\n\n\n\n\n\nCode\nwrite.gct &lt;- function(df, outdir){\n    ncol &lt;- ncol(df)\n    nrow &lt;- nrow(df)\n    annot &lt;- data.frame(NAME = rownames(df), Description = rownames(df))\n    df &lt;- cbind(annot, df)\n    header &lt;- as.data.frame(matrix(\"\", ncol = ncol(df), nrow = 2))\n    colnames(header) &lt;- colnames(df)\n    header[3,] &lt;- colnames(df)\n    header[1,1] &lt;- \"#1.2\"\n    header[2,1] &lt;- nrow\n    header[2,2] &lt;- ncol\n    df &lt;- rbind(header, df)\n    write.table(df, file = outdir, quote = F, row.names = F, col.names = F, sep = \"\\t\")\n}\n\nwrite.gct(\n    gex, \n    outdir = \"../1_processed/TCGA_lung_gex.gct\")\n\n\n\n\nCode\ngs &lt;- list()\ngs[[1]] &lt;- read.csv(\"../2_metastatic_genes/TCGA_lung_univariate_lasso.txt\", header = F)[[1]]\ngs[[2]] &lt;- read.csv(\"../2_metastatic_genes/TCGA_LUSC_univariate_lasso.txt\", header = F)[[1]]\ngs[[3]] &lt;- read.csv(\"../2_metastatic_genes/TCGA_LUAD_univariate_lasso.txt\", header = F)[[1]]\nnames(gs) &lt;- c(\"lung\", \"LUSC\", \"LUAD\")\n\n\n\n\nCode\nwrite.gmt &lt;- function(genelist, file) {\n  file_conn &lt;- file(file, open = \"wt\")\n  for (set_name in names(genelist)) {\n    line &lt;- c(set_name, set_name, genelist[[set_name]])\n    writeLines(paste(line, collapse = \"\\t\"), file_conn)}\n  close(file_conn)}\n\nwrite.gmt(gs, \"../2_metastatic_genes/metastatic_gene_list.gmt\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#perform-ssgsea",
    "href": "ssgsea2.html#perform-ssgsea",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.3 Perform ssGSEA",
    "text": "3.3 Perform ssGSEA\n\n\nCode\nlibrary(ssGSEA2)\n\n\n\n\nCode\nres = run_ssGSEA2(\n    \"../1_processed/TCGA_lung_gex.gct\",\n    output.prefix = \"ssGSEA\",\n    gene.set.databases = \"../2_metastatic_genes/metastatic_gene_list.gmt\",\n    output.directory = \"../3_classification\",\n    sample.norm.type = \"none\", \n    weight = 0.75, \n    correl.type = \"rank\", \n    statistic = \"area.under.RES\",\n    output.score.type = \"NES\", \n    nperm = 1000, \n    min.overlap = 2, \n    extended.output = F, \n    global.fdr = FALSE,\n    log.file = \"../3_classification/ssGSEA.log\")\n\n\nparsing as GCT v1.2\n\n../1_processed/TCGA_lung_gex.gct 20501 rows, 1017 cols, 0 row descriptors, 0 col descriptors\n\n\n\nlung   33.33333 %\nLUSC   66.66667 %\nLUAD   100 %\nmain loop: 1.832375 \nSaving file to  ../3_classification/signature_gct/lung_n1017x151.gct \nDimensions of matrix: [151x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../3_classification/signature_gct/LUSC_n1017x97.gct \nDimensions of matrix: [97x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../3_classification/signature_gct/LUAD_n1017x110.gct \nDimensions of matrix: [110x1017]\nSetting precision to 4\nSaved.\n[1] \"Total gene sets: 3\"\n[1] \"Unique gene sets: 3\"\nSaving file to  ../3_classification/ssGSEA-scores.gct \nDimensions of matrix: [3x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../3_classification/ssGSEA-pvalues.gct \nDimensions of matrix: [3x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../3_classification/ssGSEA-fdr-pvalues.gct \nDimensions of matrix: [3x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../3_classification/ssGSEA-combined.gct \nDimensions of matrix: [3x1017]\nSetting precision to 4\nSaved.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#combine-ssgsea-with-survival",
    "href": "ssgsea2.html#combine-ssgsea-with-survival",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.4 Combine ssGSEA with survival",
    "text": "3.4 Combine ssGSEA with survival\n\n\nCode\nssgsea &lt;- read.csv(\"../3_classification/ssGSEA-scores.gct\", row.names = 1, skip = 2, sep = \"\\t\")[,-c(1,2)]\ncolnames(ssgsea) &lt;- gsub(\"\\\\.\", \"-\", colnames(ssgsea))\nssgsea &lt;- t(ssgsea)\nhead(ssgsea)\n\n\n\nA matrix: 6 × 3 of type dbl\n\n\n\nlung\nLUSC\nLUAD\n\n\n\n\nTCGA-05-4244\n8.5002\n6.2464\n5.3847\n\n\nTCGA-05-4249\n7.4015\n6.3764\n5.0068\n\n\nTCGA-05-4250\n8.0044\n6.8932\n5.9218\n\n\nTCGA-05-4382\n7.6315\n6.2107\n5.2858\n\n\nTCGA-05-4384\n8.0361\n6.3106\n6.1525\n\n\nTCGA-05-4389\n7.8553\n6.4251\n5.6181\n\n\n\n\n\n\n\nCode\n# read survival data\nsurv &lt;- read.csv(\"../1_processed/TCGA_lung_survival.csv\", row.names = 1)\ncolnames(surv) &lt;- gsub(\"\\\\.\", \"_\", colnames(surv))\n\n# remove time &lt; 0 or NA\nsurv &lt;- surv %&gt;% filter(!is.na(PFI_time_1))\nsurv$PFI_time_1 &lt;- as.numeric(surv$PFI_time_1)/365.25\nsurv$PFI_1 &lt;- as.numeric(surv$PFI_1)\n\n# set max PFI to 10 years\nsurv$PFI_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 0, surv$PFI_1)\nsurv$PFI_time_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 10, surv$PFI_time_1)\nsurv &lt;- surv[surv$PFI_time_1 &gt; 0, ]\n\n# create survival object\nsurv$PFI &lt;- Surv(surv$PFI_time_1, surv$PFI_1)\nsurv &lt;- cbind(surv, ssgsea[rownames(surv),,drop = F])\nhead(surv)\n\n\n\nA data.frame: 6 × 21\n\n\n\ntype\nPFI_1\nPFI_time_1\nPFI_2\nPFI_time_2\nPFS\nPFS_time\nDSS_cr\nDSS_time_cr\nDFI_cr\n⋯\nPFI_cr\nPFI_time_cr\nPFI_1_cr\nPFI_time_1_cr\nPFI_2_cr\nPFI_time_2_cr\nPFI\nlung\nLUSC\nLUAD\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n⋯\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;Surv&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nTCGA-05-4249\nLUAD\n0\n4.1697467\n0\n1523\n0\n1523\n0\n1523\nNA\n⋯\n0\n1523\n0\n1523\n0\n1523\n4.1697467, 0\n7.4015\n6.3764\n5.0068\n\n\nTCGA-05-4250\nLUAD\n0\n0.3312799\n0\n121\n1\n121\nNA\n121\nNA\n⋯\n2\n121\n2\n121\n2\n121\n0.3312799, 0\n8.0044\n6.8932\n5.9218\n\n\nTCGA-05-4382\nLUAD\n1\n0.9144422\n1\n334\n1\n334\n0\n607\n1\n⋯\n1\n334\n1\n334\n1\n334\n0.9144422, 1\n7.6315\n6.2107\n5.2858\n\n\nTCGA-05-4384\nLUAD\n1\n0.5010267\n1\n183\n1\n183\n0\n426\nNA\n⋯\n1\n183\n1\n183\n1\n183\n0.5010267, 1\n8.0361\n6.3106\n6.1525\n\n\nTCGA-05-4389\nLUAD\n0\n3.7481177\n0\n1369\n0\n1369\n0\n1369\nNA\n⋯\n0\n1369\n0\n1369\n0\n1369\n3.7481177, 0\n7.8553\n6.4251\n5.6181\n\n\nTCGA-05-4390\nLUAD\n1\n1.0814511\nNA\nNA\n1\n395\n0\n1126\nNA\n⋯\n1\n395\n1\n395\nNA\nNA\n1.0814511, 1\n8.8213\n6.5057\n5.7669",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#lusc",
    "href": "ssgsea2.html#lusc",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.5 LUSC",
    "text": "3.5 LUSC\nFilter only LUSC patients and repeat with LUSC signatures.\n\n\nCode\nfind_coxph_cutoff &lt;- function(df, column, survival, set_cutoff = NULL, covariates = NULL, interquartile = T){\n\n    #split data at 200 intervals and find the cutoff with most significant difference in survival\n    if(length(covariates) &gt; 0){\n        covariates_coxph &lt;- paste0(\" + \", paste0(covariates, collapse = \" + \"))\n        print(paste0(\"set covariates ===&gt; \", covariates_coxph))}\n    else{\n        covariates_coxph &lt;- \"\"}\n    cutoff &lt;- NULL\n\n    if(interquartile){\n        lower &lt;- quantile(df[[column]])[[2]]\n        upper &lt;- quantile(df[[column]])[[4]]}\n    else{\n        lower &lt;- min(df[[column]])\n    upper &lt;- max(df[[column]])}\n\n    no &lt;- nrow(df)\n\n    for (split in seq(lower, upper, length.out = 200)) {\n        df[[\"coxph\"]] &lt;- ifelse(df[[column]] &gt; split, \"High\", \"Low\")\n        df[[\"coxph\"]] &lt;- factor(df[[\"coxph\"]], levels = c(\"Low\", \"High\"))\n        remove &lt;- any(table(df$coxph) &lt; no / 20)\n        if (remove) {\n            next\n        }\n        surv.cox &lt;- coxph(as.formula(paste0(survival, \" ~ coxph\", covariates_coxph)), data = df)\n        \n        # Extract HR and p-value\n        hr &lt;- round(exp(coef(surv.cox))[1], 3)  # Hazard Ratio\n        logr &lt;- round(summary(surv.cox)$coefficients[1, \"Pr(&gt;|z|)\"], 3)  # p-value\n        \n        cutoff &lt;- rbind(cutoff, c(split, hr, logr))\n        colnames(cutoff) &lt;- c(\"cutoff\", \"HR\", \"logr\")\n    }\n\n\n    # use most significant cutoff to split data in \"High\" & \"Low\" groups\n    cutoff &lt;- as.data.frame(cutoff) %&gt;% arrange(logr)\n    if(length(set_cutoff) == 0){\n        threshold &lt;- cutoff$cutoff[1]}\n    else if(length(set_cutoff) == 1){\n        threshold &lt;- set_cutoff}\n    else{\n    error(\"set_cutoff should be set to length of 1\")}\n    print(paste0(\"for &lt;\", column, \"&gt;, cutoff is set at  ===&gt; \", threshold))\n    df[[paste0(column, \"_coxph\")]] &lt;- ifelse(df[[column]] &gt; paste0(threshold), \"High\", \"Low\")\n    df[[paste0(column, \"_coxph\")]] &lt;- factor(df[[paste0(column, \"_coxph\")]], levels=c(\"Low\", \"High\"))\n    df$coxph &lt;- NULL\n    return(df)\n}\n\n\n\n\nCode\nsurv.LUSC &lt;- surv %&gt;% \n    filter(type == \"LUSC\")\nsurv.LUSC &lt;- find_coxph_cutoff(df = surv.LUSC, column = \"LUSC\", survival = \"PFI\", covariate = NULL, interquartile = T)\n\n\n[1] \"for &lt;LUSC&gt;, cutoff is set at  ===&gt; 6.36844773869347\"\n\n\n\n\nCode\np &lt;- plot_survival(surv.LUSC, column = \"LUSC_coxph\", legend.title = \"LUSC\", survival = \"PFI\", palette = c(\"grey60\", \"grey1\"), conf.int = T, ylim = c(0, 1), ylab = \"Probability\", xlab = \"PFI (Years)\", pval.coord = c(0.1, 0.1))\np\n\n\nWarning message:\n“The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.”\n\n\n\n\n\n\n\n\n\n\n\nCode\nsurv &lt;- merge(surv, surv.LUSC[, c(\"LUSC_coxph\"), drop = F], by = 0, all.x = T) %&gt;%\n    column_to_rownames(\"Row.names\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#luad",
    "href": "ssgsea2.html#luad",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.6 LUAD",
    "text": "3.6 LUAD\nFilter only LUAD patients and repeat with LUSC signatures.\n\n\nCode\nfind_coxph_cutoff &lt;- function(df, column, survival, set_cutoff = NULL, covariates = NULL, interquartile = T){\n\n    #split data at 200 intervals and find the cutoff with most significant difference in survival\n    if(length(covariates) &gt; 0){\n        covariates_coxph &lt;- paste0(\" + \", paste0(covariates, collapse = \" + \"))\n        print(paste0(\"set covariates ===&gt; \", covariates_coxph))}\n    else{\n        covariates_coxph &lt;- \"\"}\n    cutoff &lt;- NULL\n\n    if(interquartile){\n        lower &lt;- quantile(df[[column]])[[2]]\n        upper &lt;- quantile(df[[column]])[[4]]}\n    else{\n        lower &lt;- min(df[[column]])\n    upper &lt;- max(df[[column]])}\n\n    no &lt;- nrow(df)\n\n    for (split in seq(lower, upper, length.out = 200)) {\n        df[[\"coxph\"]] &lt;- ifelse(df[[column]] &gt; split, \"High\", \"Low\")\n        df[[\"coxph\"]] &lt;- factor(df[[\"coxph\"]], levels = c(\"Low\", \"High\"))\n        remove &lt;- any(table(df$coxph) &lt; no / 20)\n        if (remove) {\n            next\n        }\n        surv.cox &lt;- coxph(as.formula(paste0(survival, \" ~ coxph\", covariates_coxph)), data = df)\n        \n        # Extract HR and p-value\n        hr &lt;- round(exp(coef(surv.cox))[1], 3)  # Hazard Ratio\n        logr &lt;- round(summary(surv.cox)$coefficients[1, \"Pr(&gt;|z|)\"], 3)  # p-value\n        \n        cutoff &lt;- rbind(cutoff, c(split, hr, logr))\n        colnames(cutoff) &lt;- c(\"cutoff\", \"HR\", \"logr\")\n    }\n\n\n    # use most significant cutoff to split data in \"High\" & \"Low\" groups\n    cutoff &lt;- as.data.frame(cutoff) %&gt;% arrange(logr)\n    if(length(set_cutoff) == 0){\n        threshold &lt;- cutoff$cutoff[1]}\n    else if(length(set_cutoff) == 1){\n        threshold &lt;- set_cutoff}\n    else{\n    error(\"set_cutoff should be set to length of 1\")}\n    print(paste0(\"for &lt;\", column, \"&gt;, cutoff is set at  ===&gt; \", threshold))\n    df[[paste0(column, \"_coxph\")]] &lt;- ifelse(df[[column]] &gt; paste0(threshold), \"High\", \"Low\")\n    df[[paste0(column, \"_coxph\")]] &lt;- factor(df[[paste0(column, \"_coxph\")]], levels=c(\"Low\", \"High\"))\n    df$coxph &lt;- NULL\n    return(df)\n}\n\n\n\n\nCode\nsurv.LUAD &lt;- surv %&gt;% \n    filter(type == \"LUAD\")\nsurv.LUAD &lt;- find_coxph_cutoff(df = surv.LUAD, column = \"LUAD\", survival = \"PFI\", covariate = NULL, interquartile = T)\n\n\n[1] \"for &lt;LUAD&gt;, cutoff is set at  ===&gt; 5.2353\"\n\n\n\n\nCode\nhead(surv)\n\n\n\nA data.frame: 6 × 22\n\n\n\ntype\nPFI_1\nPFI_time_1\nPFI_2\nPFI_time_2\nPFS\nPFS_time\nDSS_cr\nDSS_time_cr\nDFI_cr\n⋯\nPFI_time_cr\nPFI_1_cr\nPFI_time_1_cr\nPFI_2_cr\nPFI_time_2_cr\nPFI\nlung\nLUSC\nLUAD\nLUSC_coxph\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n⋯\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;Surv&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;fct&gt;\n\n\n\n\nTCGA-05-4249\nLUAD\n0\n4.1697467\n0\n1523\n0\n1523\n0\n1523\nNA\n⋯\n1523\n0\n1523\n0\n1523\n4.1697467, 0\n7.4015\n6.3764\n5.0068\nNA\n\n\nTCGA-05-4250\nLUAD\n0\n0.3312799\n0\n121\n1\n121\nNA\n121\nNA\n⋯\n121\n2\n121\n2\n121\n0.3312799, 0\n8.0044\n6.8932\n5.9218\nNA\n\n\nTCGA-05-4382\nLUAD\n1\n0.9144422\n1\n334\n1\n334\n0\n607\n1\n⋯\n334\n1\n334\n1\n334\n0.9144422, 1\n7.6315\n6.2107\n5.2858\nNA\n\n\nTCGA-05-4384\nLUAD\n1\n0.5010267\n1\n183\n1\n183\n0\n426\nNA\n⋯\n183\n1\n183\n1\n183\n0.5010267, 1\n8.0361\n6.3106\n6.1525\nNA\n\n\nTCGA-05-4389\nLUAD\n0\n3.7481177\n0\n1369\n0\n1369\n0\n1369\nNA\n⋯\n1369\n0\n1369\n0\n1369\n3.7481177, 0\n7.8553\n6.4251\n5.6181\nNA\n\n\nTCGA-05-4390\nLUAD\n1\n1.0814511\nNA\nNA\n1\n395\n0\n1126\nNA\n⋯\n395\n1\n395\nNA\nNA\n1.0814511, 1\n8.8213\n6.5057\n5.7669\nNA\n\n\n\n\n\n\n\nCode\nplot_survival &lt;- function(df, column, survival, palette = NULL, ...){\n    if(!(column %in% colnames(df))){\n    message(paste0(\"&lt;\", column, \"&gt; not found in dataframe. Skipped\"))\n    next}\n\n    suppressMessages({\n    b &lt;- as.formula(paste0(survival, \"~\", column))\n    fit &lt;- eval(substitute(survfit(b, data = df, conf.type = \"log-log\"), list(b = b)))\n\n    if(length(names(fit$strata)) &gt; 1){\n        names(fit$strata) &lt;- gsub(\".*=\", \"\", names(fit$strata))\n        kmplot &lt;- ggsurvplot(\n            fit,\n            data = df,\n            palette = palette,\n            risk.table = T,\n            pval = T,\n            risk.table.y.text.col = T,\n            risk.table.y.text = F,\n            legend = \"right\",\n            ...)\n            }\n    else{\n            kmplot &lt;- NULL\n    }})\n    kmplot[[1]] &lt;- kmplot[[1]] + theme(panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\n    kmplot[[2]] &lt;- kmplot[[2]] + theme(panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\n    return(kmplot)}\n\n\n\n\nCode\np &lt;- plot_survival(surv.LUAD, column = \"LUAD_coxph\", legend.title = \"LUAD\", survival = \"PFI\", palette = c(\"grey60\", \"grey1\"), conf.int = T, ylim = c(0, 1), ylab = \"Probability\", xlab = \"PFI (Years)\", pval.coord = c(0.1, 0.1))\np\n\n\n\n\n\n\n\n\n\n\n\nCode\nsurv &lt;- merge(surv, surv.LUAD[, c(\"LUAD_coxph\"), drop = F], by = 0, all.x = T) %&gt;%\n    column_to_rownames(\"Row.names\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "ssgsea2.html#save-output",
    "href": "ssgsea2.html#save-output",
    "title": "3  Risk Classification with ssGSEA",
    "section": "3.7 Save Output",
    "text": "3.7 Save Output\n\n\nCode\nclass &lt;- surv[,c(\"LUSC_coxph\", \"LUAD_coxph\"), drop = F]\nfor(c in 1:ncol(class)){\n    class[,c] &lt;- as.character(class[,c])}\nclass[class == \"High\"] &lt;- 1\nclass[class == \"Low\"] &lt;- 0\nhead(class)\n\nwrite.csv(class, \"../3_classification/TCGA_metastatic_classification.csv\", quote = F)\n\n\n\nA data.frame: 6 × 2\n\n\n\nLUSC_coxph\nLUAD_coxph\n\n\n\n&lt;chr&gt;\n&lt;chr&gt;\n\n\n\n\nTCGA-05-4249\nNA\n0\n\n\nTCGA-05-4250\nNA\n1\n\n\nTCGA-05-4382\nNA\n1\n\n\nTCGA-05-4384\nNA\n1\n\n\nTCGA-05-4389\nNA\n1\n\n\nTCGA-05-4390\nNA\n1",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Risk Classification with ssGSEA</span>"
    ]
  },
  {
    "objectID": "xenium2.html",
    "href": "xenium2.html",
    "title": "4  Validation in Xenium",
    "section": "",
    "text": "Code\n.libPaths(\"/nemo/lab/caladod/working/Matthew/library/R/library/4.3.2_xenium\")\nlibrary(Seurat)\nlibrary(future)\nplan(\"multisession\", workers = 10)\nlibrary(ggplot2)\n\n\nLoading required package: SeuratObject\n\nLoading required package: sp\n\n\nAttaching package: ‘SeuratObject’\n\n\nThe following objects are masked from ‘package:base’:\n\n    intersect, t\n\n\n\n\n\n\nCode\n#Redefine ReadXenium()\nReadXenium &lt;- function (data.dir, outs = c(\"matrix\", \"microns\"), type = \"centroids\", \n          mols.qv.threshold = 20) \n{\n  type &lt;- match.arg(arg = type, choices = c(\"centroids\", \"segmentations\"), \n                    several.ok = TRUE)\n  outs &lt;- match.arg(arg = outs, choices = c(\"matrix\", \"microns\"), \n                    several.ok = TRUE)\n  outs &lt;- c(outs, type)\n  has_dt &lt;- requireNamespace(\"data.table\", quietly = TRUE) && \n    requireNamespace(\"R.utils\", quietly = TRUE)\n  data &lt;- sapply(outs, function(otype) {\n    switch(EXPR = otype, matrix = {\n      matrix &lt;- suppressWarnings(Read10X(data.dir = file.path(data.dir, \n                                                              \"cell_feature_matrix/\")))\n      matrix\n    }, centroids = {\n      if (has_dt) {\n        cell_info &lt;- as.data.frame(data.table::fread(file.path(data.dir, \n                                                               \"cells.csv.gz\")))\n      } else {\n        cell_info &lt;- read.csv(file.path(data.dir, \"cells.csv.gz\"))\n      }\n      cell_centroid_df &lt;- data.frame(x = cell_info$x_centroid, \n                                     y = cell_info$y_centroid, cell = cell_info$cell_id, \n                                     stringsAsFactors = FALSE)\n      cell_centroid_df\n    }, segmentations = {\n      if (has_dt) {\n        cell_boundaries_df &lt;- as.data.frame(data.table::fread(file.path(data.dir, \n                                                                        \"cell_boundaries.csv.gz\")))\n      } else {\n        cell_boundaries_df &lt;- read.csv(file.path(data.dir, \n                                                 \"cell_boundaries.csv.gz\"), stringsAsFactors = FALSE)\n      }\n      names(cell_boundaries_df) &lt;- c(\"cell\", \"x\", \"y\")\n      cell_boundaries_df\n    }, microns = {\n      \n      transcripts &lt;- arrow::read_parquet(file.path(data.dir, \"transcripts.parquet\"))\n      transcripts &lt;- subset(transcripts, qv &gt;= mols.qv.threshold)\n      \n      df &lt;- data.frame(x = transcripts$x_location, y = transcripts$y_location, \n                       gene = transcripts$feature_name, stringsAsFactors = FALSE)\n      df\n    }, stop(\"Unknown Xenium input type: \", otype))\n  }, USE.NAMES = TRUE)\n\n  segmentations.data &lt;- list(centroids = CreateCentroids(data$centroids), \n                           segmentation = CreateSegmentation(data$microns))\n  coords &lt;- CreateFOV(coords = segmentations.data, type = c(\"segmentation\", \n                                                            \"centroids\"), molecules = data$microns, assay = \"RNA\")\n  xenium.obj &lt;- CreateSeuratObject(counts = data$matrix[[\"Gene Expression\"]], \n                                  assay = \"RNA\")\n  xenium.obj[[\"BlankCodeword\"]] &lt;- CreateAssayObject(counts = data$matrix[[\"Unassigned Codeword\"]])\n  xenium.obj[[\"ControlCodeword\"]] &lt;- CreateAssayObject(counts = data$matrix[[\"Negative Control Codeword\"]])\n  xenium.obj[[\"ControlProbe\"]] &lt;- CreateAssayObject(counts = data$matrix[[\"Negative Control Probe\"]])\n  xenium.obj[[\"fov\"]] &lt;- coords\n  \n  return(xenium.obj)\n}\n\n\n\n\nCode\nsuppressMessages({\n    path &lt;- \"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/Xenium/Prime5k/\"\n    # need \"cell_feature_matrix\", \"transcripts.csv.gz\", \"cell.csv.gz\"\n    xenium.obj &lt;- ReadXenium(path)}\n)\n\n\n\n\nCode\nVlnPlot(xenium.obj, features = c(\"nFeature_RNA\", \"nCount_RNA\"), ncol = 2, pt.size = 0)\n\n\nRasterizing points since number of points exceeds 100,000.\nTo disable this behavior set `raster=FALSE`\n\nRasterizing points since number of points exceeds 100,000.\nTo disable this behavior set `raster=FALSE`\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncolnames(xenium.obj@meta.data)\n\n\n\n'orig.ident''nCount_RNA''nFeature_RNA''nCount_BlankCodeword''nFeature_BlankCodeword''nCount_ControlCodeword''nFeature_ControlCodeword''nCount_ControlProbe''nFeature_ControlProbe'\n\n\n\n\nCode\nluad.genes &lt;- read.csv(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/2_metastatic_genes/TCGA_LUAD_univariate_lasso.txt\", header = F)[[1]]\nhead(luad.genes)\n\n\n\n'ACOT12''ACOXL''ADAM5P''ARPM1''ATG10''B3GALTL'\n\n\n\n\nCode\nlength(luad.genes)\n\n\n110\n\n\n\n\nCode\nlength(which(rownames(xenium.obj) %in% luad.genes))\n\n\n20\n\n\n\n\nCode\nluad.genes.xenium &lt;- rownames(xenium.obj)[rownames(xenium.obj) %in% luad.genes]\n\n\n\n\nCode\nImageDimPlot(xenium.obj, fov = \"fov\", molecules = luad.genes.xenium[1:9], nmols = 20000)\n\n\n\n\n\n\n\n\n\n\n\nCode\nImageDimPlot(xenium.obj, fov = \"fov\", molecules = luad.genes.xenium[10:18], nmols = 20000)\n\n\n\n\n\n\n\n\n\n\n\nCode\nImageDimPlot(xenium.obj, fov = \"fov\", molecules = luad.genes.xenium[19:20], nmols = 20000)\n\n\nWarning message in brewer.pal(n = length(x = levels(x = molecules$molecule)), name = \"Set1\"):\n“minimal value for n is 3, returning requested palette with 3 different levels\n”\n\n\n\n\n\n\n\n\n\n\n\nCode\nplan(\"multisession\", workers = 1)\nxenium.obj &lt;- NormalizeData(xenium.obj)\n\n\nNormalizing layer: counts\n\n\n\n\n\nCode\nlibrary(UCell)\nxenium.obj &lt;- AddModuleScore_UCell(xenium.obj, features = list(LUADGS = luad.genes.xenium), assay = \"RNA\")\n\n\n\n\nCode\ncolnames(xenium.obj@meta.data)\n\n\n\n'orig.ident''nCount_RNA''nFeature_RNA''nCount_BlankCodeword''nFeature_BlankCodeword''nCount_ControlCodeword''nFeature_ControlCodeword''nCount_ControlProbe''nFeature_ControlProbe''LUADGS_UCell'\n\n\n\n\nCode\nImageFeaturePlot(xenium.obj, fov = \"fov\",  features = \"LUADGS_UCell\", nmols = 20000)\n\n\n\n\n\n\n\n\n\n\n\nCode\nsummary(as.numeric(xenium.obj@meta.data$LUADGS_UCell))\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n0.00000 0.00000 0.00000 0.02460 0.05541 0.35481 \n\n\n\n\nCode\ncolors &lt;- viridis::viridis(10)\nImageFeaturePlot(xenium.obj, fov = \"fov\",  features = \"LUADGS_UCell\", nmols = 20000, cols = colors)\n\n\n\n\n\n\n\n\n\n\n\nCode\ntiff(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/4_xenium/xenium_featureplot.tiff\", width = 5000, height = 5000,res = 300)\ncolors &lt;- viridis::viridis(10)\nprint(\n    ImageFeaturePlot(xenium.obj, fov = \"fov\", features = \"LUADGS_UCell\", nmols = 20000, cols = colors))\ndev.off()\n\n\npng: 2\n\n\n\n\nCode\n## 20 genes\nwrite.table(luad.genes.xenium, \"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/4_xenium/xenium20.txt\", col.names = F, row.names = F, quote = F)\n\n\n\n\nCode\nlength(luad.genes.xenium)\n\n\n20",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Validation in Xenium</span>"
    ]
  },
  {
    "objectID": "validation2.html",
    "href": "validation2.html",
    "title": "5  Validation of Xenium Genes",
    "section": "",
    "text": "5.1 20 genes\nCode\nxenium.genes &lt;- read.csv(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/4_xenium/xenium20.txt\", header = F)[[1]]\nCode\nxenium.genes\n\n\n\n'ATG10''CUL4A''DAB1''DAOA''DKK1''EFNB2''GCKR''HSPA6''INSL4''KCNK2''MMP8''NCSTN''NR5A1''NTSR1''OPRM1''PARP1''PBX1''RILPL2''SCG5''TMEM106B'\nCode\n# processed on NEMO so far\nset.seed(42)\nlibrary(tidyverse)\nlibrary(SummarizedExperiment)\nlibrary(readxl)\nlibrary(glmnet)\nlibrary(survival)\nsetwd(\"/camp/home/hungm/scratch/hungm/matthew/MH_Hackathon/2025_CRUK/data/TCGA2/0_raw\")\nsource(\"/camp/home/hungm/working/Matthew/library/R/functions/coxph/coxph.R\")\nCode\ngs &lt;- list(xenium20 = xenium.genes)\nwrite.gmt &lt;- function(genelist, file) {\n  file_conn &lt;- file(file, open = \"wt\")\n  for (set_name in names(genelist)) {\n    line &lt;- c(set_name, set_name, genelist[[set_name]])\n    writeLines(paste(line, collapse = \"\\t\"), file_conn)}\n  close(file_conn)}\n\nwrite.gmt(gs, \"../4_xenium/xenium20.gmt\")\nCode\nlibrary(ssGSEA2)\nCode\nres = run_ssGSEA2(\n    \"../1_processed/TCGA_lung_gex.gct\",\n    output.prefix = \"ssGSEA\",\n    gene.set.databases = \"../4_xenium/xenium20.gmt\",\n    output.directory = \"../4_xenium/ssGSEA_validation/\",\n    sample.norm.type = \"none\", \n    weight = 0.75, \n    correl.type = \"rank\", \n    statistic = \"area.under.RES\",\n    output.score.type = \"NES\", \n    nperm = 1000, \n    min.overlap = 2, \n    extended.output = F, \n    global.fdr = FALSE,\n    log.file = \"../4_xenium/ssGSEA_validation/ssGSEA.log\")\n\n\nparsing as GCT v1.2\n\n../1_processed/TCGA_lung_gex.gct 20501 rows, 1017 cols, 0 row descriptors, 0 col descriptors\n\n\n\nxenium20   100 %\nmain loop: 33.76148 \nSaving file to  ../4_xenium/ssGSEA_validation//signature_gct/xenium20_n1017x20.gct \nDimensions of matrix: [20x1017]\nSetting precision to 4\nSaved.\n[1] \"Total gene sets: 1\"\n[1] \"Unique gene sets: 1\"\nSaving file to  ../4_xenium/ssGSEA_validation//ssGSEA-scores.gct \nDimensions of matrix: [1x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../4_xenium/ssGSEA_validation//ssGSEA-pvalues.gct \nDimensions of matrix: [1x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../4_xenium/ssGSEA_validation//ssGSEA-fdr-pvalues.gct \nDimensions of matrix: [1x1017]\nSetting precision to 4\nSaved.\nSaving file to  ../4_xenium/ssGSEA_validation//ssGSEA-combined.gct \nDimensions of matrix: [1x1017]\nSetting precision to 4\nSaved.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Validation of Xenium Genes</span>"
    ]
  },
  {
    "objectID": "validation2.html#combine-ssgsea-with-survival",
    "href": "validation2.html#combine-ssgsea-with-survival",
    "title": "5  Validation of Xenium Genes",
    "section": "5.2 Combine ssGSEA with survival",
    "text": "5.2 Combine ssGSEA with survival\n\n\nCode\nssgsea &lt;- read.csv(\"../3_classification/ssGSEA-scores.gct\", row.names = 1, skip = 2, sep = \"\\t\")[,-c(1,2)]\ncolnames(ssgsea) &lt;- gsub(\"\\\\.\", \"-\", colnames(ssgsea))\nssgsea &lt;- t(ssgsea)\nhead(ssgsea)\n\n\n\nA matrix: 6 × 3 of type dbl\n\n\n\nlung\nLUSC\nLUAD\n\n\n\n\nTCGA-05-4244\n8.5002\n6.2464\n5.3847\n\n\nTCGA-05-4249\n7.4015\n6.3764\n5.0068\n\n\nTCGA-05-4250\n8.0044\n6.8932\n5.9218\n\n\nTCGA-05-4382\n7.6315\n6.2107\n5.2858\n\n\nTCGA-05-4384\n8.0361\n6.3106\n6.1525\n\n\nTCGA-05-4389\n7.8553\n6.4251\n5.6181\n\n\n\n\n\n\n\nCode\nxenium20 &lt;- read.csv(\"../4_xenium/ssGSEA_validation/ssGSEA-scores.gct\", row.names = 1, skip = 2, sep = \"\\t\")[,-c(1,2)]\ncolnames(xenium20) &lt;- gsub(\"\\\\.\", \"-\", colnames(xenium20))\nxenium20 &lt;- t(xenium20)\nhead(xenium20)\n\n\n\nA matrix: 6 × 1 of type dbl\n\n\n\nxenium20\n\n\n\n\nTCGA-05-4244\n3.9846\n\n\nTCGA-05-4249\n3.5907\n\n\nTCGA-05-4250\n4.1152\n\n\nTCGA-05-4382\n3.8769\n\n\nTCGA-05-4384\n3.9146\n\n\nTCGA-05-4389\n3.8547\n\n\n\n\n\n\n\nCode\n# read gene expression\ngex &lt;- read.csv(\"../1_processed/TCGA_lung_gex.csv\", row.names = 1)\ncolnames(gex) &lt;- gsub(\"\\\\.\", \"-\", colnames(gex))\ngex[1:5, 1:5]\n\n\n\nA data.frame: 5 × 5\n\n\n\nTCGA-05-4244\nTCGA-05-4249\nTCGA-05-4250\nTCGA-05-4382\nTCGA-05-4384\n\n\n\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nA1BG\n26.0302\n120.1350\n50.8597\n145.904\n127.3670\n\n\nA1CF\n0.0000\n0.3220\n0.0000\n0.000\n0.0000\n\n\nA2BP1\n1.7454\n1.6098\n0.0000\n0.000\n0.0000\n\n\nA2LD1\n135.5020\n89.0629\n151.1330\n112.069\n87.5748\n\n\nA2M\n9844.7900\n25712.7000\n16943.6000\n23326.300\n48314.6000\n\n\n\n\n\n\n\nCode\n# read survival data\nsurv &lt;- read.csv(\"../1_processed/TCGA_lung_survival.csv\", row.names = 1)\ncolnames(surv) &lt;- gsub(\"\\\\.\", \"_\", colnames(surv))\n\n# remove time &lt; 0 or NA\nsurv &lt;- surv %&gt;% filter(!is.na(PFI_time_1))\nsurv$PFI_time_1 &lt;- as.numeric(surv$PFI_time_1)/365.25\nsurv$PFI_1 &lt;- as.numeric(surv$PFI_1)\n\n# set max PFI to 10 years\nsurv$PFI_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 0, surv$PFI_1)\nsurv$PFI_time_1 &lt;- ifelse(surv$PFI_time_1 &gt; 10, 10, surv$PFI_time_1)\nsurv &lt;- surv[surv$PFI_time_1 &gt; 0, ]\n\n# create survival object\nsurv$PFI &lt;- Surv(surv$PFI_time_1, surv$PFI_1)\nsurv &lt;- cbind(surv, ssgsea[rownames(surv),])\nsurv &lt;- cbind(surv, xenium20[rownames(surv),, drop = F])\n\n# merge expression with survival data\nxenium20exp &lt;- scale(t(gex)[rownames(surv),gs[[1]]])\nsurv &lt;- cbind(surv, xenium20exp)\n\nhead(surv)\n\n\n\nA data.frame: 6 × 42\n\n\n\ntype\nPFI_1\nPFI_time_1\nPFI_2\nPFI_time_2\nPFS\nPFS_time\nDSS_cr\nDSS_time_cr\nDFI_cr\n⋯\nMMP8\nNCSTN\nNR5A1\nNTSR1\nOPRM1\nPARP1\nPBX1\nRILPL2\nSCG5\nTMEM106B\n\n\n\n&lt;chr&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n&lt;int&gt;\n⋯\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n&lt;dbl&gt;\n\n\n\n\nTCGA-05-4249\nLUAD\n0\n4.1697467\n0\n1523\n0\n1523\n0\n1523\nNA\n⋯\n-0.08783663\n0.4951856\n-0.14335876\n-0.10751199\n-0.1012157\n1.0723559\n-0.6294784\n-0.06100895\n-0.25605393\n-0.19812889\n\n\nTCGA-05-4250\nLUAD\n0\n0.3312799\n0\n121\n1\n121\nNA\n121\nNA\n⋯\n-0.28991267\n-0.5851363\n-0.14070875\n-0.06453740\n-0.1012157\n-0.6689259\n-0.8526004\n-0.45319223\n1.02220044\n0.81105108\n\n\nTCGA-05-4382\nLUAD\n1\n0.9144422\n1\n334\n1\n334\n0\n607\n1\n⋯\n0.98036290\n2.1426275\n-0.09064977\n-0.05428312\n0.2282981\n-0.4721944\n-0.5185958\n0.06266203\n0.06254723\n1.34793936\n\n\nTCGA-05-4384\nLUAD\n1\n0.5010267\n1\n183\n1\n183\n0\n426\nNA\n⋯\n0.16829559\n0.9057056\n-0.14596833\n-0.10685010\n0.9502542\n-0.5934462\n-0.2294542\n-0.34025058\n0.13034559\n-0.06938389\n\n\nTCGA-05-4389\nLUAD\n0\n3.7481177\n0\n1369\n0\n1369\n0\n1369\nNA\n⋯\n-0.32039621\n1.0763723\n-0.14799204\n-0.10914289\n-0.1012157\n-0.1040168\n-0.9009495\n0.56662034\n0.47124464\n1.69444579\n\n\nTCGA-05-4390\nLUAD\n1\n1.0814511\nNA\nNA\n1\n395\n0\n1126\nNA\n⋯\n1.07621775\n-0.1573105\n-0.13637465\n0.08829672\n-0.1012157\n-0.4078074\n-0.5433974\n-1.26060748\n0.06295134\n0.21645937\n\n\n\n\n\n\n\nCode\nsurv.LUAD &lt;- surv %&gt;%\n    filter(type == \"LUAD\") %&gt;%\n    mutate(\n        LUAD = as.numeric(scale(LUAD)),\n        xenium20 = as.numeric(scale(xenium20)))\n\n\n\n\nCode\nlm_eqn &lt;- function(df){\n    m &lt;- lm(y ~ x, df);\n    eq &lt;- substitute(italic(y) == a + b %.% italic(x)*\",\"~~italic(r)^2~\"=\"~r2, \n         list(a = format(unname(coef(m)[1]), digits = 2),\n              b = format(unname(coef(m)[2]), digits = 2),\n             r2 = format(summary(m)$r.squared, digits = 3)))\n    as.character(as.expression(eq));\n}\n\n\n\n\nCode\nlibrary(ggpmisc)\n\n\nLoading required package: ggpp\n\nRegistered S3 methods overwritten by 'ggpp':\n  method                  from   \n  heightDetails.titleGrob ggplot2\n  widthDetails.titleGrob  ggplot2\n\n\nAttaching package: ‘ggpp’\n\n\nThe following objects are masked from ‘package:ggpubr’:\n\n    as_npc, as_npcx, as_npcy\n\n\nThe following object is masked from ‘package:ggplot2’:\n\n    annotate\n\n\nRegistered S3 method overwritten by 'ggpmisc':\n  method                  from   \n  as.character.polynomial polynom\n\n\n\n\n\nCode\nclass &lt;- read.csv(\"../3_classification/TCGA_metastatic_classification.csv\", row.names = 1)\nsurv.LUAD &lt;- cbind(surv.LUAD, class[rownames(surv.LUAD),])\n\n\n\n\nCode\noptions(repr.plot.width=7, repr.plot.height=5)\nsurv.LUAD %&gt;%\n    #filter(LUAD &gt; -5 & LUAD &lt; 3) %&gt;%\n    #filter(xenium20 &lt; 4) %&gt;%\n    mutate(risk = ifelse(LUAD_coxph == 1, \"High\", \"Low\")) %&gt;%\n    ggplot(aes(x = LUAD, y = xenium20)) +\n    geom_point(aes(color = risk)) +\n    stat_cor(method = \"pearson\") +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\n    scale_color_manual(values = c(\"black\", \"grey60\")) +\n    guides(color = guide_legend(title = \"Risk\")) +\n    theme_bw()\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\noptions(repr.plot.width=15, repr.plot.height=10)\nsurv.LUAD %&gt;%\n    select(c(\"LUAD\", unname(gs[[1]]))) %&gt;%\n    pivot_longer(cols = unname(gs[[1]]), names_to = \"xenium_genes\", values_to = \"exprs\") %&gt;%\n    mutate(\n        LUAD = as.numeric(LUAD),\n        exprs = as.numeric(exprs)) %&gt;%\n    ggplot(aes(x = LUAD, y = exprs)) +\n    facet_wrap(~xenium_genes, scales = \"free\") +\n    geom_point() +\n    stat_cor(method = \"pearson\") +\n    geom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\n    theme_bw() \n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\nfind_coxph_cutoff &lt;- function(df, column, survival, set_cutoff = NULL, covariates = NULL, interquartile = T){\n\n    #split data at 200 intervals and find the cutoff with most significant difference in survival\n    if(length(covariates) &gt; 0){\n        covariates_coxph &lt;- paste0(\" + \", paste0(covariates, collapse = \" + \"))\n        print(paste0(\"set covariates ===&gt; \", covariates_coxph))}\n    else{\n        covariates_coxph &lt;- \"\"}\n    cutoff &lt;- NULL\n\n    if(interquartile){\n        lower &lt;- quantile(df[[column]])[[2]]\n        upper &lt;- quantile(df[[column]])[[4]]}\n    else{\n        lower &lt;- min(df[[column]])\n    upper &lt;- max(df[[column]])}\n\n    no &lt;- nrow(df)\n\n    for (split in seq(lower, upper, length.out = 200)) {\n        df[[\"coxph\"]] &lt;- ifelse(df[[column]] &gt; split, \"High\", \"Low\")\n        df[[\"coxph\"]] &lt;- factor(df[[\"coxph\"]], levels = c(\"Low\", \"High\"))\n        remove &lt;- any(table(df$coxph) &lt; no / 20)\n        if (remove) {\n            next\n        }\n        surv.cox &lt;- coxph(as.formula(paste0(survival, \" ~ coxph\", covariates_coxph)), data = df)\n        \n        # Extract HR and p-value\n        hr &lt;- round(exp(coef(surv.cox))[1], 3)  # Hazard Ratio\n        logr &lt;- round(summary(surv.cox)$coefficients[1, \"Pr(&gt;|z|)\"], 3)  # p-value\n        \n        cutoff &lt;- rbind(cutoff, c(split, hr, logr))\n        colnames(cutoff) &lt;- c(\"cutoff\", \"HR\", \"logr\")\n    }\n\n\n    # use most significant cutoff to split data in \"High\" & \"Low\" groups\n    cutoff &lt;- as.data.frame(cutoff) %&gt;% arrange(logr)\n    if(length(set_cutoff) == 0){\n        threshold &lt;- cutoff$cutoff[1]}\n    else if(length(set_cutoff) == 1){\n        threshold &lt;- set_cutoff}\n    else{\n    error(\"set_cutoff should be set to length of 1\")}\n    print(paste0(\"for &lt;\", column, \"&gt;, cutoff is set at  ===&gt; \", threshold))\n    df[[paste0(column, \"_coxph\")]] &lt;- ifelse(df[[column]] &gt; paste0(threshold), \"High\", \"Low\")\n    df[[paste0(column, \"_coxph\")]] &lt;- factor(df[[paste0(column, \"_coxph\")]], levels=c(\"Low\", \"High\"))\n    df$coxph &lt;- NULL\n    return(df)\n}\n\n\n\n\nCode\nsurv.LUAD &lt;- find_coxph_cutoff(df = surv.LUAD, column = \"xenium20\", survival = \"PFI\", covariate = NULL, interquartile = T)\n\n\n[1] \"for &lt;xenium20&gt;, cutoff is set at  ===&gt; 0.561976140789476\"\n\n\n\n\nCode\noptions(repr.plot.width=8, repr.plot.height=8)\nplot_survival &lt;- function(df, column, survival, palette = NULL, ...){\n    if(!(column %in% colnames(df))){\n    message(paste0(\"&lt;\", column, \"&gt; not found in dataframe. Skipped\"))\n    next}\n\n    suppressMessages({\n    b &lt;- as.formula(paste0(survival, \"~\", column))\n    fit &lt;- eval(substitute(survfit(b, data = df, conf.type = \"log-log\"), list(b = b)))\n\n    if(length(names(fit$strata)) &gt; 1){\n        names(fit$strata) &lt;- gsub(\".*=\", \"\", names(fit$strata))\n        kmplot &lt;- ggsurvplot(\n            fit,\n            data = df,\n            palette = palette,\n            risk.table = T,\n            pval = T,\n            risk.table.y.text.col = T,\n            risk.table.y.text = F,\n            legend = \"right\",\n            ...)\n            }\n    else{\n            kmplot &lt;- NULL\n    }})\n    kmplot[[1]] &lt;- kmplot[[1]] + theme(panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\n    kmplot[[2]] &lt;- kmplot[[2]] + theme(panel.border = element_rect(colour = \"black\", fill=NA, size=1.5))\n    return(kmplot)}\n\np &lt;- plot_survival(surv.LUAD, column = \"xenium20_coxph\", legend.title = \"Xenium20\", survival = \"PFI\", palette = c(\"grey60\", \"grey1\"), conf.int = T, ylim = c(0, 1), ylab = \"Probability\", xlab = \"PFI (Years)\", pval.coord = c(0.1, 0.1))\np",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Validation of Xenium Genes</span>"
    ]
  }
]